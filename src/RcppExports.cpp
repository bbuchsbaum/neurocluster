// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// heat_kernel
double heat_kernel(NumericVector x1, NumericVector x2, double sigma);
RcppExport SEXP neurocluster_heat_kernel(SEXP x1SEXP, SEXP x2SEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(heat_kernel(x1, x2, sigma));
    return rcpp_result_gen;
END_RCPP
}
// normalized_heat_kernel
double normalized_heat_kernel(NumericVector x1, NumericVector x2, double sigma);
RcppExport SEXP neurocluster_normalized_heat_kernel(SEXP x1SEXP, SEXP x2SEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(normalized_heat_kernel(x1, x2, sigma));
    return rcpp_result_gen;
END_RCPP
}
// best_candidate
IntegerVector best_candidate(List candidates, IntegerVector curclus, NumericMatrix coords, NumericMatrix data_centroids, NumericMatrix coord_centroids, NumericMatrix data, double sigma1, double sigma2);
RcppExport SEXP neurocluster_best_candidate(SEXP candidatesSEXP, SEXP curclusSEXP, SEXP coordsSEXP, SEXP data_centroidsSEXP, SEXP coord_centroidsSEXP, SEXP dataSEXP, SEXP sigma1SEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type candidates(candidatesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type curclus(curclusSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type data_centroids(data_centroidsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coord_centroids(coord_centroidsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type sigma1(sigma1SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(best_candidate(candidates, curclus, coords, data_centroids, coord_centroids, data, sigma1, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// find_candidates
List find_candidates(IntegerMatrix nn_index, NumericMatrix nn_dist, IntegerVector curclus, double dthresh);
RcppExport SEXP neurocluster_find_candidates(SEXP nn_indexSEXP, SEXP nn_distSEXP, SEXP curclusSEXP, SEXP dthreshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type nn_index(nn_indexSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type nn_dist(nn_distSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type curclus(curclusSEXP);
    Rcpp::traits::input_parameter< double >::type dthresh(dthreshSEXP);
    rcpp_result_gen = Rcpp::wrap(find_candidates(nn_index, nn_dist, curclus, dthresh));
    return rcpp_result_gen;
END_RCPP
}
