// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// correlation_gradient_cpp
NumericVector correlation_gradient_cpp(const NumericVector& img_4d, const NumericVector& brain_mask);
RcppExport SEXP _neurocluster_correlation_gradient_cpp(SEXP img_4dSEXP, SEXP brain_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type img_4d(img_4dSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type brain_mask(brain_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(correlation_gradient_cpp(img_4d, brain_mask));
    return rcpp_result_gen;
END_RCPP
}
// compute_scores
NumericVector compute_scores(IntegerVector curclus, NumericMatrix coords, NumericMatrix data_centroids, NumericMatrix coord_centroids, NumericMatrix data, double sigma1, double sigma2);
RcppExport SEXP _neurocluster_compute_scores(SEXP curclusSEXP, SEXP coordsSEXP, SEXP data_centroidsSEXP, SEXP coord_centroidsSEXP, SEXP dataSEXP, SEXP sigma1SEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type curclus(curclusSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type data_centroids(data_centroidsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coord_centroids(coord_centroidsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type sigma1(sigma1SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(compute_scores(curclus, coords, data_centroids, coord_centroids, data, sigma1, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// best_candidate
IntegerVector best_candidate(List candidates, IntegerVector curclus, NumericMatrix coords, NumericMatrix data_centroids, NumericMatrix coord_centroids, NumericMatrix data, double sigma1, double sigma2, double alpha);
RcppExport SEXP _neurocluster_best_candidate(SEXP candidatesSEXP, SEXP curclusSEXP, SEXP coordsSEXP, SEXP data_centroidsSEXP, SEXP coord_centroidsSEXP, SEXP dataSEXP, SEXP sigma1SEXP, SEXP sigma2SEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type candidates(candidatesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type curclus(curclusSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type data_centroids(data_centroidsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coord_centroids(coord_centroidsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type sigma1(sigma1SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(best_candidate(candidates, curclus, coords, data_centroids, coord_centroids, data, sigma1, sigma2, alpha));
    return rcpp_result_gen;
END_RCPP
}
// find_candidates
List find_candidates(IntegerMatrix nn_index, NumericMatrix nn_dist, IntegerVector curclus, double dthresh);
RcppExport SEXP _neurocluster_find_candidates(SEXP nn_indexSEXP, SEXP nn_distSEXP, SEXP curclusSEXP, SEXP dthreshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type nn_index(nn_indexSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type nn_dist(nn_distSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type curclus(curclusSEXP);
    Rcpp::traits::input_parameter< double >::type dthresh(dthreshSEXP);
    rcpp_result_gen = Rcpp::wrap(find_candidates(nn_index, nn_dist, curclus, dthresh));
    return rcpp_result_gen;
END_RCPP
}
// best_candidate_parallel
IntegerVector best_candidate_parallel(List candidates, IntegerVector curclus, NumericMatrix coords, NumericMatrix data_centroids, NumericMatrix coord_centroids, NumericMatrix data, double sigma1, double sigma2, double alpha, int grain_size);
RcppExport SEXP _neurocluster_best_candidate_parallel(SEXP candidatesSEXP, SEXP curclusSEXP, SEXP coordsSEXP, SEXP data_centroidsSEXP, SEXP coord_centroidsSEXP, SEXP dataSEXP, SEXP sigma1SEXP, SEXP sigma2SEXP, SEXP alphaSEXP, SEXP grain_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type candidates(candidatesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type curclus(curclusSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type data_centroids(data_centroidsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coord_centroids(coord_centroidsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type sigma1(sigma1SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type grain_size(grain_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(best_candidate_parallel(candidates, curclus, coords, data_centroids, coord_centroids, data, sigma1, sigma2, alpha, grain_size));
    return rcpp_result_gen;
END_RCPP
}
// best_candidate_sequential
IntegerVector best_candidate_sequential(List candidates, IntegerVector curclus, NumericMatrix coords, NumericMatrix data_centroids, NumericMatrix coord_centroids, NumericMatrix data, double sigma1, double sigma2, double alpha);
RcppExport SEXP _neurocluster_best_candidate_sequential(SEXP candidatesSEXP, SEXP curclusSEXP, SEXP coordsSEXP, SEXP data_centroidsSEXP, SEXP coord_centroidsSEXP, SEXP dataSEXP, SEXP sigma1SEXP, SEXP sigma2SEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type candidates(candidatesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type curclus(curclusSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type data_centroids(data_centroidsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coord_centroids(coord_centroidsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type sigma1(sigma1SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(best_candidate_sequential(candidates, curclus, coords, data_centroids, coord_centroids, data, sigma1, sigma2, alpha));
    return rcpp_result_gen;
END_RCPP
}
// heat_kernel
double heat_kernel(NumericVector x1, NumericVector x2, double sigma);
RcppExport SEXP _neurocluster_heat_kernel(SEXP x1SEXP, SEXP x2SEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(heat_kernel(x1, x2, sigma));
    return rcpp_result_gen;
END_RCPP
}
// normalized_heat_kernel
double normalized_heat_kernel(NumericVector x1, NumericVector x2, double sigma);
RcppExport SEXP _neurocluster_normalized_heat_kernel(SEXP x1SEXP, SEXP x2SEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(normalized_heat_kernel(x1, x2, sigma));
    return rcpp_result_gen;
END_RCPP
}
// slice_msf_runwise
Rcpp::List slice_msf_runwise(Rcpp::NumericMatrix TS, Rcpp::IntegerVector mask, Rcpp::IntegerVector vol_dim, int r, double fh_scale, int min_size, int nbhd, bool stitch_z, double theta_link, int min_contact, bool rows_are_time, double gamma, Rcpp::NumericVector voxel_dim, double spatial_beta, int target_k_global, int target_k_per_slice);
RcppExport SEXP _neurocluster_slice_msf_runwise(SEXP TSSEXP, SEXP maskSEXP, SEXP vol_dimSEXP, SEXP rSEXP, SEXP fh_scaleSEXP, SEXP min_sizeSEXP, SEXP nbhdSEXP, SEXP stitch_zSEXP, SEXP theta_linkSEXP, SEXP min_contactSEXP, SEXP rows_are_timeSEXP, SEXP gammaSEXP, SEXP voxel_dimSEXP, SEXP spatial_betaSEXP, SEXP target_k_globalSEXP, SEXP target_k_per_sliceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type TS(TSSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type vol_dim(vol_dimSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type fh_scale(fh_scaleSEXP);
    Rcpp::traits::input_parameter< int >::type min_size(min_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type nbhd(nbhdSEXP);
    Rcpp::traits::input_parameter< bool >::type stitch_z(stitch_zSEXP);
    Rcpp::traits::input_parameter< double >::type theta_link(theta_linkSEXP);
    Rcpp::traits::input_parameter< int >::type min_contact(min_contactSEXP);
    Rcpp::traits::input_parameter< bool >::type rows_are_time(rows_are_timeSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type voxel_dim(voxel_dimSEXP);
    Rcpp::traits::input_parameter< double >::type spatial_beta(spatial_betaSEXP);
    Rcpp::traits::input_parameter< int >::type target_k_global(target_k_globalSEXP);
    Rcpp::traits::input_parameter< int >::type target_k_per_slice(target_k_per_sliceSEXP);
    rcpp_result_gen = Rcpp::wrap(slice_msf_runwise(TS, mask, vol_dim, r, fh_scale, min_size, nbhd, stitch_z, theta_link, min_contact, rows_are_time, gamma, voxel_dim, spatial_beta, target_k_global, target_k_per_slice));
    return rcpp_result_gen;
END_RCPP
}
// slice_fuse_consensus
Rcpp::List slice_fuse_consensus(Rcpp::List run_results, Rcpp::IntegerVector vol_dim, int nbhd, double fh_scale, int min_size, bool use_features, double lambda, Rcpp::NumericVector voxel_dim, double spatial_beta, int target_k_global, int target_k_per_slice, bool stitch_z);
RcppExport SEXP _neurocluster_slice_fuse_consensus(SEXP run_resultsSEXP, SEXP vol_dimSEXP, SEXP nbhdSEXP, SEXP fh_scaleSEXP, SEXP min_sizeSEXP, SEXP use_featuresSEXP, SEXP lambdaSEXP, SEXP voxel_dimSEXP, SEXP spatial_betaSEXP, SEXP target_k_globalSEXP, SEXP target_k_per_sliceSEXP, SEXP stitch_zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type run_results(run_resultsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type vol_dim(vol_dimSEXP);
    Rcpp::traits::input_parameter< int >::type nbhd(nbhdSEXP);
    Rcpp::traits::input_parameter< double >::type fh_scale(fh_scaleSEXP);
    Rcpp::traits::input_parameter< int >::type min_size(min_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type use_features(use_featuresSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type voxel_dim(voxel_dimSEXP);
    Rcpp::traits::input_parameter< double >::type spatial_beta(spatial_betaSEXP);
    Rcpp::traits::input_parameter< int >::type target_k_global(target_k_globalSEXP);
    Rcpp::traits::input_parameter< int >::type target_k_per_slice(target_k_per_sliceSEXP);
    Rcpp::traits::input_parameter< bool >::type stitch_z(stitch_zSEXP);
    rcpp_result_gen = Rcpp::wrap(slice_fuse_consensus(run_results, vol_dim, nbhd, fh_scale, min_size, use_features, lambda, voxel_dim, spatial_beta, target_k_global, target_k_per_slice, stitch_z));
    return rcpp_result_gen;
END_RCPP
}
// update_centroid_online
List update_centroid_online(const List& centroid, const NumericVector& x_i, const NumericVector& c_i);
RcppExport SEXP _neurocluster_update_centroid_online(SEXP centroidSEXP, SEXP x_iSEXP, SEXP c_iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type centroid(centroidSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type c_i(c_iSEXP);
    rcpp_result_gen = Rcpp::wrap(update_centroid_online(centroid, x_i, c_i));
    return rcpp_result_gen;
END_RCPP
}
// snic_main
IntegerVector snic_main(IntegerVector L_data, const IntegerVector& mask, const NumericMatrix centroids, const IntegerVector centroid_idx, const IntegerMatrix valid_coords, const NumericMatrix norm_coords, const NumericMatrix& vecmat, int K, double s, double compactness, IntegerVector mask_lookup_data);
RcppExport SEXP _neurocluster_snic_main(SEXP L_dataSEXP, SEXP maskSEXP, SEXP centroidsSEXP, SEXP centroid_idxSEXP, SEXP valid_coordsSEXP, SEXP norm_coordsSEXP, SEXP vecmatSEXP, SEXP KSEXP, SEXP sSEXP, SEXP compactnessSEXP, SEXP mask_lookup_dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type L_data(L_dataSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type centroids(centroidsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type centroid_idx(centroid_idxSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix >::type valid_coords(valid_coordsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type norm_coords(norm_coordsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type vecmat(vecmatSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type compactness(compactnessSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type mask_lookup_data(mask_lookup_dataSEXP);
    rcpp_result_gen = Rcpp::wrap(snic_main(L_data, mask, centroids, centroid_idx, valid_coords, norm_coords, vecmat, K, s, compactness, mask_lookup_data));
    return rcpp_result_gen;
END_RCPP
}
// compute_boundaryscore_3d_cpp
IntegerVector compute_boundaryscore_3d_cpp(IntegerVector volume, IntegerVector mask);
RcppExport SEXP _neurocluster_compute_boundaryscore_3d_cpp(SEXP volumeSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type volume(volumeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_boundaryscore_3d_cpp(volume, mask));
    return rcpp_result_gen;
END_RCPP
}
// detect_boundaries_2d_cpp
IntegerVector detect_boundaries_2d_cpp(IntegerVector volume, IntegerVector mask);
RcppExport SEXP _neurocluster_detect_boundaries_2d_cpp(SEXP volumeSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type volume(volumeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(detect_boundaries_2d_cpp(volume, mask));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_correlation_gradient_module();

static const R_CallMethodDef CallEntries[] = {
    {"_neurocluster_correlation_gradient_cpp", (DL_FUNC) &_neurocluster_correlation_gradient_cpp, 2},
    {"_neurocluster_compute_scores", (DL_FUNC) &_neurocluster_compute_scores, 7},
    {"_neurocluster_best_candidate", (DL_FUNC) &_neurocluster_best_candidate, 9},
    {"_neurocluster_find_candidates", (DL_FUNC) &_neurocluster_find_candidates, 4},
    {"_neurocluster_best_candidate_parallel", (DL_FUNC) &_neurocluster_best_candidate_parallel, 10},
    {"_neurocluster_best_candidate_sequential", (DL_FUNC) &_neurocluster_best_candidate_sequential, 9},
    {"_neurocluster_heat_kernel", (DL_FUNC) &_neurocluster_heat_kernel, 3},
    {"_neurocluster_normalized_heat_kernel", (DL_FUNC) &_neurocluster_normalized_heat_kernel, 3},
    {"_neurocluster_slice_msf_runwise", (DL_FUNC) &_neurocluster_slice_msf_runwise, 16},
    {"_neurocluster_slice_fuse_consensus", (DL_FUNC) &_neurocluster_slice_fuse_consensus, 12},
    {"_neurocluster_update_centroid_online", (DL_FUNC) &_neurocluster_update_centroid_online, 3},
    {"_neurocluster_snic_main", (DL_FUNC) &_neurocluster_snic_main, 11},
    {"_neurocluster_compute_boundaryscore_3d_cpp", (DL_FUNC) &_neurocluster_compute_boundaryscore_3d_cpp, 2},
    {"_neurocluster_detect_boundaries_2d_cpp", (DL_FUNC) &_neurocluster_detect_boundaries_2d_cpp, 2},
    {"_rcpp_module_boot_correlation_gradient_module", (DL_FUNC) &_rcpp_module_boot_correlation_gradient_module, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_neurocluster(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
