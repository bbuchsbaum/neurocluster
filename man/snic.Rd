% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/snic.R
\name{snic}
\alias{snic}
\title{SNIC: Simple Non-Iterative Clustering}
\usage{
snic(vec, mask, compactness = 5, K = 500, max_iter = 100)
}
\arguments{
\item{vec}{A \code{NeuroVec} instance supplying the data to cluster.}

\item{mask}{A \code{NeuroVol} mask defining the voxels to include in the clustering result.
If the mask contains \code{numeric} data, nonzero values will define the included voxels.
If the mask is a \code{\linkS4class{LogicalNeuroVol}}, then \code{TRUE} will define the set
of included voxels.}

\item{compactness}{A numeric value controlling the compactness of the clusters, with larger values resulting
in more compact clusters. Default is 5.}

\item{K}{The number of clusters to find. Default is 500.}

\item{max_iter}{Maximum number of iterations for the SNIC algorithm. Default is 100.
Currently ignored as SNIC algorithm uses internal convergence criteria.}
}
\value{
A \code{list} of class \code{snic_cluster_result} with the following elements:
\describe{
\item{clusvol}{An instance of type \linkS4class{ClusteredNeuroVol}.}
\item{gradvol}{A \code{NeuroVol} instance representing the spatial gradient of the reference volume.}
\item{cluster}{A vector of cluster indices equal to the number of voxels in the mask.}
\item{centers}{A matrix of cluster centers with each column representing the feature vector for a cluster.}
\item{coord_centers}{A matrix of spatial coordinates with each row corresponding to a cluster.}
}
}
\description{
The SNIC function performs a spatially constrained clustering on a \code{NeuroVec} instance
using the Simple Non-Iterative Clustering (SNIC) algorithm.
}
\details{
## Parallelization Status

**Currently NOT parallelized.** SNIC uses a sequential priority queue-based algorithm
that processes voxels in order of their distance from cluster centers.

### Sequential Operations:

1. **Initialization**: Gradient-based seed selection using `find_initial_points()`
   - Finds K seed points with high gradient and spatial separation
   - Sequential search through candidate voxels

2. **Priority Queue Processing** (C++ implementation):
   - Maintains a global priority queue of voxels to be assigned
   - Each voxel assignment depends on previously processed neighbors
   - Voxels are processed in order of their combined distance metric

3. **Distance Computation**: For each voxel, calculates:
   - Feature distance to nearest cluster center
   - Spatial distance weighted by compactness parameter
   - Combined into single priority score

### Why Not Parallelized:

- **Sequential dependency**: Priority queue enforces strict processing order
- **Global state**: Each voxel assignment affects subsequent assignments
- **Algorithm design**: SNIC's key innovation is its non-iterative, sequential nature
- **Coherent clusters**: Sequential processing ensures connected components

### Performance Characteristics:

- **Complexity**: O(N log N) where N = number of voxels
- **Memory**: O(N) for priority queue and assignments
- **Speed**: Generally faster than iterative methods (supervoxels)
- **Single pass**: Processes each voxel exactly once

### Performance Tips:

- **Reduce K**: Fewer clusters means less competition for voxels
- **Adjust compactness**: Higher values create more local clusters, faster processing
- **Pre-smooth data**: Reduce noise to improve gradient-based initialization
- **Use smaller masks**: Process ROIs separately if possible
- **Alternative**: Consider `slice_msf()` or `acsc()` for parallel execution

### Comparison with Other Methods:

- **Faster than**: `supervoxels()` due to non-iterative nature
- **Slower than**: `slice_msf()` with parallel slices, `acsc()` with future backend
- **More coherent than**: Methods without spatial priority (ensures connectivity)
}
\note{
Consider using \code{\link{cluster4d}} with \code{method = "snic"} for a 
standardized interface across all clustering methods.
}
\examples{
mask <- NeuroVol(array(1, c(20,20,20)), NeuroSpace(c(20,20,20)))
vec <- replicate(10, NeuroVol(array(runif(202020), c(20,20,20)),
NeuroSpace(c(20,20,20))), simplify=FALSE)
vec <- do.call(concat, vec)

snic_res <- snic(vec, mask, compactness=5, K=100)

}
\seealso{
\code{\link{supervoxels}}
}
